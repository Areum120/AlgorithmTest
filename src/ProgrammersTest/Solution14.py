'''
문제 설명
두 수를 입력받아 두 수의 최대공약수와 최소공배수를 반환하는 함수, solution을 완성해 보세요.
배열의 맨 앞에 최대공약수, 그다음 최소공배수를 넣어 반환하면 됩니다.
예를 들어 두 수 3, 12의 최대공약수는 3, 최소공배수는 12이므로
solution(3, 12)는 [3, 12]를 반환해야 합니다.

제한 사항
두 수는 1이상 1000000이하의 자연수입니다.
입출력 예
n	m	return
3	12	[3, 12]
2	5	[1, 10]
입출력 예 설명
입출력 예 #1
위의 설명과 같습니다.

입출력 예 #2
자연수 2와 5의 최대공약수는 1, 최소공배수는 10이므로 [1, 10]을 리턴해야 합니다.
'''


'''
    최대공약수는?
    약수는 어떤 수를 나누었을 때 나누어떨어지게 하는 자연수
    최대 공약수는 n,m 공통되는 약수 중에서 최댓값
    유클리드 호제법 사용:
    n을 m으로 나눈 나머지와 m의 최대 공약수는
    n,m의 최대 공약수가 같다는 것을 의미
    n을 m으로 나누어서 m을 n에 나눈 나머지를 m에 대입시켜서
    m이 0이 될 까지 반복하면 남는 a값이 최대공약수임
 
    최소공배수 구하는 식
    n과 m의 공통된 배수 가운데 최솟값

'''

''' n을 m으로 나누어서 m을 n에 나눈 나머지를 m에 대입
m이 0이 될때까지 반복 남는 n값이 최대 공약수
n,m의 곱을 n,m의 최대 공약수로 나누기
'''
def solution(n, m):
    answer = []# []의 0번째 요소는 최대공약수 1번째 요소는 최소공배수
    x = (n * m)
    print(x)
    while m>0:#0이 될때까지
        n,m = m, n % m
    answer.append(n)
    print(int(x/answer[0]))
    answer.append(int(x/answer[0]))
    return answer

# 최소공배수는 n, m의 곱을 n,m의 최대 공약수로 나누기
print(solution(3,12))